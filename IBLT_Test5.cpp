#include <iostream>
#include "iblt.h"
#include "murmurhash3.h"
#include "utilstrencodings.h"
#include <String>
#include <ctime>
#include <stdlib.h>
#include <utility>
#include <vector>
using namespace std;

/*
A preliminary test to determine the success of the IBLT when entries with the same key value are inserted.
The create Values function was adapted to no longer ensure that unique keys are made for the different entries.
*/

//template function to convert value into vector of bits
template<typename T>
std::vector<uint8_t> ToVec(T number)
{
    std::vector<uint8_t> v(sizeof(T));
    for (size_t i = 0; i < sizeof(T); i++) {
        v.at(i) = (number >> i*8) & 0xff;
    }
    return v;
}

//function prototypes
int** createValues(int, int);

void addEntries(int** entries, IBLT* iblt, int numEntries);

bool compare(std::set<std::pair<uint64_t,std::vector<uint8_t> > > positiveValues, int** myEntries, int numEntries);


int main()
{

  int numEntries;

  int numSuccess;

  //checks functionality of listEntries for varying numbers of entries (1-50 entries)
  for (int j = 1; j <= 100; j++)
  {
    numEntries = j;

    numSuccess = 0;

    //performs list entries 10,000 times for each value of list entries
    //counts how many times out of 10,000 iterations the operation was completely successful
    for (int i = 0; i < 1000; i++)
    {
      //creates pointer to array of pointers to arrays with key/value pairs
      //max value of 500 for each entry
      int** myEntries = createValues(numEntries, 1000);

      //initializes IBLT object with number of entries and size of each entry
      IBLT* iblt = new IBLT(numEntries, sizeof(1000));


      //calls function to add entries into the IBLT
      addEntries(myEntries, iblt, numEntries);
      //initializes sets of pairs to hold keys and values
      std::set<std::pair<uint64_t,std::vector<uint8_t> > > positiveValues;

      std::set<std::pair<uint64_t,std::vector<uint8_t> > > negativeValues;

      //lists entries into the sets
      bool successful = iblt->listEntries(positiveValues, negativeValues);

      if (compare(positiveValues, myEntries, numEntries))
      {
        numSuccess++;
      }

      delete iblt;
      delete myEntries;
    }

    cout << "NumEntries = " << numEntries << ". Num Successes = " << numSuccess << endl;
  }
  return 0;

}

//creates an array of pointers to arrays of key value pairs
//input numEntries = number of key-value pairs to be created
//input maxVal = the maximum value of values generated
int** createValues(int numEntries, int maxVal)
{
  srand(time(NULL));

  int** valueArray = new int*[numEntries];

  for (int i = 0; i < numEntries; i++)
  {
    valueArray[i] = new int[2];

    bool newKeyPass;

    int newKey;

    int newVal = rand() % (maxVal + 1);

      newKey = rand() % (maxVal + 1);

    valueArray[i][0] = newKey;

    valueArray[i][1] = newVal;
  }
  //sort the array by key
  for (int i = 0; i < numEntries - 1; i++)
  {
    for (int j = i + 1; j < numEntries; j++)
    {
      if (valueArray[i][0] > valueArray[j][0])
      {
        int* tempArray = valueArray[i];
        valueArray[i] = valueArray[j];
        valueArray[j] = tempArray;
      }
    }
  }

  return valueArray;
}

//inserts the entries generated by createValues() into the IBLT
//input: entries = array of arrays of key value pairs
//input: iblt = pointer to the iblt object
//input: numEntries =the number of key-value pairs being inserted into the iblt
void addEntries(int** entries, IBLT* iblt, int numEntries)
{
  for (int i = 0; i < numEntries; i++)
  {
    iblt->insert(entries[i][0], ToVec(entries[i][1]));
  }
}

//compares the set made by the IBLT during list values to the key-value pairs generated by createValues()
//input: positiveValues = set of key value pairs generated by IBLT during list values operation
//input: myEntries = array of arrays of key value pairs that were inserted into the iblt
//input: numEntries = the number of entries originally inserted into the iblt
//output: returns true if all of the inserted key/value pairs were successfully listed out during list entries
bool compare(std::set<std::pair<uint64_t,std::vector<uint8_t> > > positiveValues, int** myEntries, int numEntries)
{
  std::set<std::pair<uint64_t, std::vector<uint8_t> > >::iterator it;

  for (it = positiveValues.begin(); it != positiveValues.end(); it++)
  {
    uint64_t key = std::get<0>(*it);
  }

  std::set<std::pair<uint64_t, std::vector<uint8_t> > > entrySet;

  for (int i = 0; i < numEntries; i++)
  {
    entrySet.insert(std::make_pair(myEntries[i][0], ToVec(myEntries[i][1])));
  }

  if (entrySet == positiveValues)
  {
    return true;
  }
  else
  {

    return false;
  }

}
